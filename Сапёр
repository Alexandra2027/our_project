from tkinter import *
import random


a = 20 #  Размер поля
b = 20 # Размер клетки
c = 40 # Количество мин на поле
mines = set(random.sample(range(1, a ** 2 + 1), c)) # Устанавливаем случайным образом мины на поле
clicked = set() # Сет, хранящий все клетки, по которым мы кликнули


# Функция, возвращающая количество мин вокруг neighbors
def check_mines(neighbors):
    return len(mines.intersection(neighbors))


# Возвращает клетки соседствующие с square
def generate_neighbors(square):
    # Левая верхняя клетка
    if square == 1:
        data = {a + 1, 2, a + 2}
    # Правая нижняя
    elif square == a ** 2:
        data = {square - a, square - 1, square - a - 1}
    # Левая нижняя
    elif square == a:
        data = {a - 1, a * 2, a * 2 - 1}
    # Верхняя правая
    elif square == a ** 2 - a + 1:
        data = {square + 1, square - a, square - a + 1}
    # Клетка в левом ряду
    elif square < a:
        data = {square + 1, square - 1, square + a,
                square + a - 1, square + a + 1}
    # Клетка в правом ряду
    elif square > a ** 2 - a:
        data = {square + 1, square - 1, square - a,
                square - a - 1, square - a + 1}
    # Клетка в нижнем ряду
    elif square % a == 0:
        data = {square + a, square - a, square - 1,
                square + a - 1, square - a - 1}
    # Клетка в верхнем ряду
    elif square % a == 1:
        data = {square + a, square - a, square + 1,
                square + a + 1, square - a + 1}
    # Любая другая клетка
    else:
        data = {square - 1, square + 1, square - a, square + a,
                square - a - 1, square - a + 1,
                square + a + 1, square + a - 1}
    return data


# Итеративная функция очистки поля
def clearance(ids):
    clicked.add(ids) # добавляем нажатую клетку в сет нажатых
    ids_neigh = generate_neighbors(ids) # Получаем все соседние клетки
    around = check_mines(ids_neigh) # высчитываем количество мин вокруг нажатой клетки
    c.itemconfig(ids, fill="green") # окрашиваем клетку в зеленый
    # Если вокруг мин нету
    if around == 0:
        # Создаем список соседних клеток
        neigh_list = list(ids_neigh)
        # Пока в списке соседей есть клетки
        while len(neigh_list) > 0:
            # Получаем клетку
            item = neigh_list.pop()
            # Окрашиваем ее в зеленый цвет
            c.itemconfig(item, fill="green")
            # Получаем соседение клетки данной клетки
            item_neigh = generate_neighbors(item)
            # Получаем количество мин в соседних клетках
            item_around = check_mines(item_neigh)
            # Если в соседних клетках есть мины
            if item_around > 0:
                # Делаем эту проверку, чтобы писать по нескольку раз на той же клетке
                if item not in clicked:
                    # Получаем координаты этой клетки
                    x1, y1, x2, y2 = c.coords(item)
                    # Пишем на клетке количество мин вокруг
                    c.create_text(x1 + b / 2,
                                  y1 + b / 2,
                                  text=str(item_around),
                                  font="Arial {}".format(int(b / 2)),
                                  fill='yellow')
            # Если в соседних клетках мин нету
            else:
                # Добавляем соседние клетки данной клетки в общий список
                neigh_list.extend(set(item_neigh).difference(clicked))
                # Убираем повторяющиеся элементы из общего списка
                neigh_list = list(set(neigh_list))
            # Добавляем клетку в нажатые
            clicked.add(item)
    # Если мины вокруг есть
    else:
        # Высчитываем координаты клетки
        x1, y1, x2, y2 = c.coords(ids)
        # Пишем количество мин вокруг
        c.create_text(x1 + b / 2,
                      y1 + b / 2,
                      text=str(around),
                      font="Arial {}".format(int(b / 2)),
                      fill='yellow')


# Рекурсивная (неэффективная) функция очистки поля
def rec_clearance(ids):
    clicked.add(ids)
    neighbors = generate_neighbors(ids)
    around = check_mines(neighbors)
    if around:
        x1, y1, x2, y2 = c.coords(ids)
        c.itemconfig(ids, fill="green")
        c.create_text(x1 + b / 2,
                      y1 + b / 2,
                      text=str(around),
                      font="Arial {}".format(int(b / 2)),
                      fill='yellow')
    else:
        for item in set(neighbors).difference(clicked):
            c.itemconfig(item, fill="green")
            rec_clearance(item)


def click(event):
    ids = c.find_withtag(CURRENT)[0]
    if ids in mines:
        # c.itemconfig(CURRENT, fill="red")
        for i in mines:
            c.itemconfig(i, fill="red")
    elif ids not in clicked:
        clearance(ids)
        c.itemconfig(CURRENT, fill="green")
    c.update()


def mark_mine(event):
    ids = c.find_withtag(CURRENT)[0]
    if ids not in clicked:
        clicked.add(ids)
        x1, y1, x2, y2 = c.coords(ids)
        c.itemconfig(CURRENT, fill="yellow")
    else:
        clicked.remove(ids)
        c.itemconfig(CURRENT, fill="gray")


screen = Tk()
screen.title("Сапёр")
c = Canvas(screen, width = a * b, height = a * b)
c.bind("<Button-1>", click)
c.bind("<Button-3>", mark_mine)
c.pack()
for i in range(a):
    for j in range(a):
        c.create_rectangle(i * b, j * b, i * b + b, j * b + b, fill='gray')
screen.mainloop()
